/*#include<stdio.h>
//从键盘上输入3 * 3矩阵的元素，计算其主对角线上元素之和。
//例：
//（1）输入：1 2 3 4 5 6 7 8 9   输出：sum = 15
//（2）输入：33 435 4 76 87 45 75 56 923   输出：sum = 1043

int main()
{
	int arr[3][3];
	for (int i = 0; i < 3; i++)
	{
		for (int j = 0; j < 3; j++)
		{
			scanf("%d", &arr[i][j]);
		}
	}
	int sum = arr[0][0] + arr[1][1] + arr[2][2];
	printf("sum=%d\n", sum);
	return 0;

}*/
/*#include<stdio.h>
#define N 10
//从键盘上输入n(0 < n < 11)，再输入n*n矩阵的元素；按照一定格式输出矩阵；矩阵转置，再输出矩阵。（输出时每个元素的最小宽度为5）
//	（1）
//	输入：
//	2
//	1 2 3 4
//	输出：
//	1    2
//	3    4
//	Afer transposation :
//1    3
//2    4

void input(int a[N][N], int n)
{
	for (int i = 0; i < n; i++)
	{
		for (int j = 0; j < n; j++)
		{
			scanf("%d", &a[i][j]);
		}
	}
}
void output(int a[N][N], int n)
{
	for (int i = 0; i < n; i++)
	{
		for (int j = 0; j < n; j++)
		{
			printf("%5d", a[i][j]);
		}
		printf("\n");
	}
}
void convert(int a[N][N], int n)
{

	for (int i = 1; i < n; i++)
	{
		for (int j = 0; j < i; j++)
		{
			int t = 0;
		    t= a[i][j];
		   a[i][j] = a[j][i];
		   a[j][i] = t;
		}
	}
}
int main()
{
	
	int a[N][N];
	int n;
	scanf("%d", &n);
	input(a, n);
	output(a, n);
	convert(a, n);
	printf("Afer transposation:\n");
	output(a, n);
	return 0;
}*/

/*#include<stdio.h>
#define N 11
//从键盘上输入n(1 < n < 11)，再输入n个整数，将它们存放到一个数组中，然后按逆序存放再输出。
//	输出时各数组元素以空格间隔：输出每个数组元素后再输出一个空格。
//	例：
//	（1）输入：
//	5
//	1 2 3 4 5
//	输出：5 4 3 2 1

int main()
{
	int n;
	scanf("%d", &n);
	int a[N] = { 0 };
	for (int i = 0; i < n; i++)
	{
		scanf("%d", &a[i]);
	}
	for (int j = n - 1; j >= 0; j--)
	{
		printf("%d ", a[j]);
	}
	return 0;
}*/
#include<stdio.h>
#define ROW 100
#define COL 100
//输出n行杨辉三角形递归算法
/*int YH(int i, int j)
{
	if (j == 0 || j == i)
	{
		return 1;
	}
	else
		return YH(i - 1, j - 1) + YH(i - 1, j);
}
int main()
{
	int n;
	scanf("%d", &n);
	for (int i = 0; i < n; i++)
	{
		for (int j = 0; j <= i; j++)
		{
			printf("%5d", YH(i, j));
		}
		printf("\n");
	}
	return 0;
}*/
//循环算法
/*int main()
{
	int arr[ROW][COL];
	int n;
	scanf("%d", &n);
	
	for (int i = 0; i < n; i++)
	{
		for (int j = 0; j <= i; j++)
		{
			if (i == j || j == 0)
				arr[i][j] = 1;
			else
			{
				arr[i][j] = arr[i - 1][j - 1] + arr[i - 1][j];
			}
		}
	}
	for (int i = 0; i < n; i++)
	{
		for (int j = 0; j <= i; j++)
		{
			printf("%5d", arr[i][j]);
		}
		printf("\n");
	}
	return 0;
}*/
/*#include<stdio.h>
//从键盘上输入4 * 5的二维数组的元素，查找这个数组是否有鞍点。
//若存在鞍点，则输出鞍点的值及它的行列下标，若没有鞍点则输出 No

int main()
{
	int arr[4][5],flag=0;
	int row = 0;
	int col = 0;
	for (int i = 0; i < 4; i++)
	{
		for (int j = 0; j < 5; j++)
		{
			scanf("%d", &arr[i][j]);
		}
	}
	for (int i = 0; i < 4; i++)
	{
		
		int max = arr[i][0];//假设该行的最大值
		    row = i;
		    col = 0;
		for (int j = 0; j < 5; j++)
		{
			if (max < arr[i][j])
			{
				max = arr[i][j];
				row = i;
				col = j;
			}
		}
		int fmin = 0;
		for (int i = 0; i < 4; i++)
		{
			if (max > arr[i][col])
			{
				fmin = 1;//说明其不是鞍点
			}
		}
		if (fmin == 0)
		{
			flag = 1;
			//printf("a[%d][%d]=%d\n", row, col, arr[row][col]);
			break;
		}
		
	}
	if (flag == 1)
	{
		printf("a[%d][%d]=%d", row, col, arr[row][col]);
	}
	else
	{
		printf("No\n");
	}
	return 0;
}*/
/*#include<stdio.h>
#include<string.h>
//二分查找在某个有序数组中查找具体的数利用函数
//折半查找
int binary_search(int  arr[], int n,int sz)
{

	int left = 0;
	int right = sz - 1;
	while (left <= right)
	{
		int mid = (left + right) / 2;//确定中间数组下标
		if (arr[mid] > n)
		{
		  right = right - 1;
		}
		else if (arr[mid] < n)
		{
		 left = left + 1;
		}
		else
		{
		  return mid;//返回该函数的下标
		}
	}
	return -1;
}
int main()
{
	int  arr[] = { 1,2,3,4,5,6,7,8,9,11,12,13,16,19,21 };
	int  k=0;
	scanf("%d", &k);
	int sz = sizeof(arr) / sizeof(arr[0]);
	int ret = binary_search(arr, k,sz)+1;
	if (ret == 0)
		printf("No\n");
	else
		printf("num=%d\n", ret);
}*/
//从键盘上输入一个字符串，输出它的长度。（要求不要使用strlen函数）
#include<stdio.h>
#include<string.h>
int main()
{
	char a[80]="\0";
	int i = 0,l=0;
	gets_s(a);
	while (a[i] != '\0')
	{
		i++;
		l++;
	}
	printf("%d\n", l);	
	return 0;
}
