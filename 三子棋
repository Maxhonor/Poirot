#include<stdio.h>
#include<stdlib.h>
#include<time.h>
#define ROW 3
#define COL 3
//玩家赢 - '*'
//电脑赢 - '#'
//平局 - 'Q'
//继续 - 'C'
void InitBoard(char board[ROW][COL], int row, int col)//初始化棋盘
{
	for (int i = 0; i < row; i++)
	{
		for (int j = 0; j < col; j++)
		{
			 board[i][j]=' ';
			
		}
	}

}
void DisplayBoard(char board[ROW][COL], int row, int col)
{
	for (int i = 0; i < row; i++)
	{
		for (int j = 0; j < col; j++)
		{
           printf(" %c ", board[i][j]);//打印一行的数据
		   if (j < col - 1)
			   printf("|"); 
		}
		printf("\n");
		//打印分割行
		if (i < row - 1)
		{
			for (int j = 0; j < col; j++)
			{
				printf("---");
				if (j < col - 1)
					printf("|");
			}
			printf("\n");
		}
	}
}
void PlayerMove(char board[ROW][COL],int row,int col)
{
	int x, y;
	printf("玩家走:\n");
	while (1)
	{
		printf("请输入要下的坐标:");
		scanf("%d%d", &x, &y);
		//判断x和y的合法性
		if (x >= 1 && x <= row && y >= 1 && y <= col)
		{
			if (board[x - 1][y - 1] == ' ')
			{
				board[x - 1][y - 1] = '*';
				break;
			}
			else
			{
				printf("该坐标已被占用\n");
			}

		}
		else
		{
			printf("坐标非法，请重新输入！\n");
		}
	}
}
void ComputerMove(char board[ROW][COL], int row, int col)
{
	int x, y;
	printf("电脑走:\n");
	while (1)
	{
	   x = rand() % row;
	   y = rand() % col;
	   if (board[x][y] == ' ')
	   {
		 board[x][y] = '#';
		 break;
	   }
	} 
}
int IsFull(char board[ROW][COL],int row,int col)//判断棋局是否是满的
{
	for (int i = 0; i < row; i++)
	{
		for (int j = 0; j < col; j++)
		{
			if (board[i][j] == ' ')
				return 0;
		}
	}
	return 1;
}
char IsWin(char board[ROW][COL], int row, int col)
{
		for (int i = 0; i < row; i++)//横三行
		{
			if (board[i][0] == board[i][1] && board[i][1] == board[i][2] && board[i][1] != ' ')
				return board[i][1];
		}
		for (int i = 0; i < col; i++)//列三行
		{
			if (board[0][i] == board[1][i] && board[1][i] == board[2][i] && board[1][i] != ' ')
				return board[1][i];
		}
		//判断两个对角线是否一样
		if (board[0][0] == board[1][1] && board[1][1] == board[2][2] && board[1][1] != ' ')
			return board[1][1];
		if (board[0][2] == board[1][1] && board[1][1] == board[2][0] && board[1][1] != ' ')
			return board[1][1];
		//判断是否平局
		if (1 == IsFull(board, ROW, COL))
		{
			return 'Q';
		}
		return 'C';//如果不是平局也不是其他情况就返回C一直循环下去
}

void menu()//菜单函数 
{
	printf("****************************************\n");
	printf("***********1.play     0.exit************\n");
	printf("****************************************\n");
}

void game()//游戏操作函数
{
	char ret = 0;
	char board[ROW][COL] = { 0 };//数组初始化
	InitBoard(board, ROW, COL);//初始化棋盘
	DisplayBoard(board,ROW,COL);//打印棋盘
	while (1)
	{
		PlayerMove(board, ROW, COL);//玩家开始下棋
		DisplayBoard(board, ROW, COL);//调用棋盘函数
		//判断玩家是否赢
		ret=IsWin(board, ROW, COL);
		if (ret != 'C')
		{
           break;
		}
			
		//电脑下棋
		ComputerMove(board, ROW, COL);
		DisplayBoard(board, ROW, COL);
		//判断电脑是否赢
		ret=IsWin(board,ROW,COL);
		if (ret != 'C')
		{
			break;
		}
			
	}
	if (ret == '#')
	{
		printf("电脑赢\n");
	}
		
	else if (ret == '*')
	{
		printf("玩家赢\n");
	}
	else 
	{
		printf("平局\n");
	}
}

void test()
{
	srand((unsigned int)time(NULL));//取随机值的函数
	int input = 0;
	do
	{
		menu();
		printf("请选择:");
		scanf("%d", &input);
		switch (input)
		{
		case 1:
			game();
			break;
		case 0:
			printf("退出游戏\n");
			break;
		default:
			printf("选择错误请重新选择！\n");
			break;
		}
	} while(input);
}


int main()
{
	test();
	return 0;
}
